{"ast":null,"code":"var _jsxFileName = \"D:\\\\Final-Backup\\\\stock-chart\\\\src\\\\Components\\\\CompareCompany\\\\CompareCompany.js\";\nimport React, { Component } from 'react';\nimport './CompareCompany.css';\nimport Card from 'react-bootstrap/Card';\nimport { Button, Form } from 'react-bootstrap';\nimport NavWithDropDownUser from '../UserNavBar';\nimport { Row, Col } from 'react-bootstrap';\nimport FusionCharts from \"fusioncharts\";\nimport charts from \"fusioncharts/fusioncharts.charts\";\nimport ReactFusioncharts from \"react-fusioncharts\";\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nFusionTheme(FusionCharts);\ncharts(FusionCharts); //ReactFC.fcRoot(FusionCharts, Column2D, FusionTheme,excelImport);\n\nclass CompareCompany extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      exchangeData: [],\n      exchangeSelected: '',\n      companySelected: '',\n      fromPeriod: '',\n      toPeriod: '',\n      periodicity: '',\n      dataFormatChart: [],\n      addButtonClicked: false,\n      secondCompanySelected: '',\n      category: [],\n      companyValue1: [],\n      companyValue2: []\n    };\n    this.generateMap = this.generateMap.bind(this);\n    this.addNewForm = this.addNewForm.bind(this);\n  }\n\n  addNewForm() {\n    this.setState({\n      addButtonClicked: true\n    });\n  }\n\n  componentDidMount() {\n    var requestOptions = {\n      method: 'GET',\n      headers: {\n        \"Authorization\": \"Bearer \" + this.props.getAuthToken()\n      }\n    };\n    Promise.all([fetch(\"https://company--service.herokuapp.com/company/getCompanies\", requestOptions), fetch(\"https://stockexchange--service.herokuapp.com/stockexchange/getNames\", requestOptions)]).then(([res1, res2]) => {\n      return Promise.all([res1.json(), res2.json()]);\n    }).then(([res1, res2]) => {\n      this.setState({\n        data: res1,\n        exchangeData: res2\n      });\n    });\n  }\n\n  generateMap(e) {\n    e.preventDefault();\n\n    if (this.state.secondCompanySelected === '') {\n      var jsonBody = {\n        \"exchange\": this.state.exchangeSelected,\n        \"company\": this.state.companySelected,\n        \"fromPeriod\": this.state.fromPeriod,\n        \"toPeriod\": this.state.toPeriod,\n        \"periodicity\": this.state.periodicity\n      };\n      var requestOptions = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + this.props.getAuthToken()\n        },\n        body: JSON.stringify(jsonBody)\n      };\n      fetch('https://stockprice--service.herokuapp.com/excel/getCompaniesByDate', requestOptions).then(res => {\n        if (res.status === 200) {\n          return res.json();\n        } else {\n          console.log(res.status);\n        }\n\n        return null;\n      }).then(data => {\n        if (data != null) {\n          console.log(data);\n          let dataChart = [];\n          var length = data.length;\n\n          for (var i = 0; i < length; i++) {\n            let price = data[i].currentPrice;\n            let date = data[i].date;\n            let tempObj = {\n              \"label\": date,\n              \"value\": price\n            };\n            dataChart.push(tempObj);\n          }\n\n          console.log(dataChart);\n          this.setState({\n            dataFormatChart: dataChart,\n            addButtonClicked: false\n          });\n        }\n      });\n    } else {\n      var jsonBody1 = {\n        \"exchange\": this.state.exchangeSelected,\n        \"company\": this.state.companySelected,\n        \"fromPeriod\": this.state.fromPeriod,\n        \"toPeriod\": this.state.toPeriod,\n        \"periodicity\": this.state.periodicity\n      };\n      var jsonBody2 = {\n        \"exchange\": this.state.exchangeSelected,\n        \"company\": this.state.secondCompanySelected,\n        \"fromPeriod\": this.state.fromPeriod,\n        \"toPeriod\": this.state.toPeriod,\n        \"periodicity\": this.state.periodicity\n      };\n      var requestOptions1 = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + this.props.getAuthToken()\n        },\n        body: JSON.stringify(jsonBody1)\n      };\n      var requestOptions2 = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + this.props.getAuthToken()\n        },\n        body: JSON.stringify(jsonBody2)\n      };\n      Promise.all([fetch(\"https://stockprice--service.herokuapp.com/excel/getCompaniesByDate\", requestOptions1), fetch(\"https://stockprice--service.herokuapp.com/excel/getCompaniesByDate\", requestOptions2)]).then(([res1, res2]) => {\n        return Promise.all([res1.json(), res2.json()]);\n      }).then(([res1, res2]) => {\n        if (res1 != null && res2 != null) {\n          console.log(res1);\n          console.log(res2);\n          let category = [];\n          let companyValue1 = [];\n          let companyValue2 = [];\n          var length = res1.length;\n\n          for (var i = 0; i < length; i++) {\n            let date = res1[i].date;\n            let price1 = res1[i].currentPrice;\n            let price2 = res2[i].currentPrice;\n            let tempObj = {\n              \"label\": date\n            };\n            let comp1Obj = {\n              \"value\": price1\n            };\n            let comp2Obj = {\n              \"value\": price2\n            };\n            category.push(tempObj);\n            companyValue1.push(comp1Obj);\n            companyValue2.push(comp2Obj);\n          }\n\n          this.setState({\n            category: category,\n            companyValue1: companyValue1,\n            companyValue2: companyValue2\n          });\n        }\n      });\n    }\n  }\n\n  render() {\n    const dataSource = {\n      chart: {\n        caption: \"Stock Market Price\",\n        exportEnabled: \"1\",\n        exportMode: \"client\",\n        yaxisname: \"Price\",\n        numberprefix: \"Rs.\",\n        rotatelabels: \"1\",\n        setadaptiveymin: \"1\",\n        theme: \"fusion\"\n      },\n      data: this.state.dataFormatChart\n    };\n    const dataSource2Companies = {\n      chart: {\n        caption: \"Comparison of 2 Companies over time\",\n        exportEnabled: \"1\",\n        exportMode: \"client\",\n        yaxisname: \"Price\",\n        numberprefix: \"Rs.\",\n        showhovereffect: \"1\",\n        theme: \"fusion\"\n      },\n      categories: [{\n        category: this.state.category\n      }],\n      dataset: [{\n        seriesname: this.state.companySelected,\n        data: this.state.companyValue1\n      }, {\n        seriesname: this.state.secondCompanySelected,\n        data: this.state.companyValue2\n      }]\n    };\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NavWithDropDownUser, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"compare-main-div\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            id: \"select-form-cc\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n              id: \"header-cc\",\n              children: \"Compare Companies\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(Form, {\n                  children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      id: \"select-c-s\",\n                      children: \"Select Stock Exchange\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 245,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      onChange: e => this.setState({\n                        exchangeSelected: e.target.value\n                      }),\n                      name: \"exchange\",\n                      id: \"exchange\",\n                      children: this.state.exchangeData.map(exchange => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: exchange,\n                        children: exchange\n                      }, exchange, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 248,\n                        columnNumber: 53\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 246,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 244,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Enter Company\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 256,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                      onChange: e => this.setState({\n                        companySelected: e.target.value\n                      }),\n                      type: \"text\",\n                      id: \"select-c\",\n                      placeholder: \"Enter Company name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 257,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 259,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    md: \"2\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                        id: \"from-period\",\n                        children: \"From Period\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 262,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        onChange: e => this.setState({\n                          fromPeriod: e.target.value\n                        }),\n                        id: \"select-d\",\n                        type: \"date\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 263,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 261,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                        children: \"To Period\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 267,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        onChange: e => this.setState({\n                          toPeriod: e.target.value\n                        }),\n                        id: \"select-d\",\n                        type: \"date\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 268,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 266,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 260,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    md: \"2\",\n                    children: [/*#__PURE__*/_jsxDEV(Col, {\n                      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                          id: \"select-p\",\n                          children: \"Select Periodicity\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 276,\n                          columnNumber: 53\n                        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                          onChange: e => this.setState({\n                            periodicity: e.target.value\n                          }),\n                          name: \"period\",\n                          id: \"period\",\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"weekly\",\n                            children: \"Weekly\"\n                          }, \"weekly\", false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 278,\n                            columnNumber: 57\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"monthly\",\n                            children: \"Monthly\"\n                          }, \"monthly\", false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 279,\n                            columnNumber: 57\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"quarterly\",\n                            children: \"Quarterly\"\n                          }, \"quarterly\", false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 280,\n                            columnNumber: 57\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"yearly\",\n                            children: \"Yearly\"\n                          }, \"yearly\", false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 281,\n                            columnNumber: 57\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 277,\n                          columnNumber: 53\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 275,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 274,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                        children: \" Click to add company\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 286,\n                        columnNumber: 49\n                      }, this), this.state.addButtonClicked === false ? /*#__PURE__*/_jsxDEV(Button, {\n                        onClick: this.addNewForm,\n                        id: \"add-button\",\n                        variant: \"primary\",\n                        children: \" + \"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 287,\n                        columnNumber: 90\n                      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"text\",\n                        onChange: e => this.setState({\n                          secondCompanySelected: e.target.value\n                        }),\n                        placeholder: \"Enter new company name\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 289,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 285,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 273,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: this.generateMap,\n                    variant: \"primary\",\n                    id: \"generate\",\n                    type: \"submit\",\n                    children: \"Generate Chart\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chart\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            id: \"chart-display\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n              id: \"chart-header\",\n              children: \" Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              id: \"chart-body\",\n              children: this.state.secondCompanySelected === '' ? /*#__PURE__*/_jsxDEV(ReactFusioncharts, {\n                id: \"fusionCharts\",\n                type: \"line\",\n                width: \"100%\",\n                height: \"100%\",\n                dataFormat: \"JSON\",\n                dataSource: dataSource\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 37\n              }, this) : /*#__PURE__*/_jsxDEV(ReactFusioncharts, {\n                type: \"msline\",\n                width: \"100%\",\n                height: \"100%\",\n                dataFormat: \"JSON\",\n                dataSource: dataSource2Companies\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CompareCompany;","map":{"version":3,"sources":["D:/Final-Backup/stock-chart/src/Components/CompareCompany/CompareCompany.js"],"names":["React","Component","Card","Button","Form","NavWithDropDownUser","Row","Col","FusionCharts","charts","ReactFusioncharts","FusionTheme","CompareCompany","constructor","props","state","data","exchangeData","exchangeSelected","companySelected","fromPeriod","toPeriod","periodicity","dataFormatChart","addButtonClicked","secondCompanySelected","category","companyValue1","companyValue2","generateMap","bind","addNewForm","setState","componentDidMount","requestOptions","method","headers","getAuthToken","Promise","all","fetch","then","res1","res2","json","e","preventDefault","jsonBody","body","JSON","stringify","res","status","console","log","dataChart","length","i","price","currentPrice","date","tempObj","push","jsonBody1","jsonBody2","requestOptions1","requestOptions2","price1","price2","comp1Obj","comp2Obj","render","dataSource","chart","caption","exportEnabled","exportMode","yaxisname","numberprefix","rotatelabels","setadaptiveymin","theme","dataSource2Companies","showhovereffect","categories","dataset","seriesname","target","value","map","exchange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './CompareCompany.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport NavWithDropDownUser from '../UserNavBar';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FusionCharts from \"fusioncharts\";\r\nimport charts from \"fusioncharts/fusioncharts.charts\";\r\nimport ReactFusioncharts from \"react-fusioncharts\";\r\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\r\n\r\nFusionTheme(FusionCharts);\r\ncharts(FusionCharts);\r\n\r\n//ReactFC.fcRoot(FusionCharts, Column2D, FusionTheme,excelImport);\r\nclass CompareCompany extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            exchangeData: [],\r\n            exchangeSelected: '',\r\n            companySelected: '',\r\n            fromPeriod: '',\r\n            toPeriod: '',\r\n            periodicity: '',\r\n            dataFormatChart: [],\r\n            addButtonClicked: false,\r\n            secondCompanySelected: '',\r\n            category: [],\r\n            companyValue1: [],\r\n            companyValue2: []\r\n        }\r\n        this.generateMap = this.generateMap.bind(this);\r\n        this.addNewForm = this.addNewForm.bind(this);\r\n    }\r\n\r\n    addNewForm() {\r\n        this.setState({ addButtonClicked: true });\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        var requestOptions = {\r\n            method: 'GET',\r\n            headers: { \"Authorization\": \"Bearer \" + this.props.getAuthToken() }\r\n        }\r\n\r\n        Promise.all([\r\n            fetch(\"https://company--service.herokuapp.com/company/getCompanies\", requestOptions),\r\n            fetch(\"https://stockexchange--service.herokuapp.com/stockexchange/getNames\", requestOptions)\r\n        ])\r\n            .then(([res1, res2]) => {\r\n                return Promise.all([res1.json(), res2.json()])\r\n            })\r\n            .then(([res1, res2]) => {\r\n                this.setState({\r\n                    data: res1,\r\n                    exchangeData: res2\r\n                })\r\n            })\r\n    }\r\n\r\n    generateMap(e) {\r\n        e.preventDefault();\r\n        if (this.state.secondCompanySelected === '') {\r\n            var jsonBody = {\r\n                \"exchange\": this.state.exchangeSelected,\r\n                \"company\": this.state.companySelected,\r\n                \"fromPeriod\": this.state.fromPeriod,\r\n                \"toPeriod\": this.state.toPeriod,\r\n                \"periodicity\": this.state.periodicity\r\n            }\r\n\r\n            var requestOptions = {\r\n                method: 'POST',\r\n                headers: { \"Content-Type\": \"application/json\", \"Authorization\": \"Bearer \" + this.props.getAuthToken() },\r\n                body: JSON.stringify(jsonBody)\r\n            }\r\n\r\n            fetch('https://stockprice--service.herokuapp.com/excel/getCompaniesByDate', requestOptions)\r\n                .then(res => {\r\n                    if (res.status === 200) {\r\n                        return res.json();\r\n                    }\r\n                    else {\r\n                        console.log(res.status);\r\n                    }\r\n                    return null;\r\n                })\r\n                .then(data => {\r\n                    if (data != null) {\r\n                        console.log(data);\r\n                        let dataChart = [];\r\n                        var length = data.length;\r\n                        for (var i = 0; i < length; i++) {\r\n                            let price = data[i].currentPrice;\r\n                            let date = data[i].date;\r\n                            let tempObj = {\r\n                                \"label\": date,\r\n                                \"value\": price\r\n                            }\r\n\r\n                            dataChart.push(tempObj);\r\n                        }\r\n                        console.log(dataChart);\r\n                        this.setState({\r\n                            dataFormatChart: dataChart,\r\n                            addButtonClicked: false\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            var jsonBody1 = {\r\n                \"exchange\": this.state.exchangeSelected,\r\n                \"company\": this.state.companySelected,\r\n                \"fromPeriod\": this.state.fromPeriod,\r\n                \"toPeriod\": this.state.toPeriod,\r\n                \"periodicity\": this.state.periodicity\r\n            }\r\n\r\n            var jsonBody2 = {\r\n                \"exchange\": this.state.exchangeSelected,\r\n                \"company\": this.state.secondCompanySelected,\r\n                \"fromPeriod\": this.state.fromPeriod,\r\n                \"toPeriod\": this.state.toPeriod,\r\n                \"periodicity\": this.state.periodicity\r\n            }\r\n\r\n            var requestOptions1 = {\r\n                method: 'POST',\r\n                headers: { \"Content-Type\": \"application/json\", \"Authorization\": \"Bearer \" + this.props.getAuthToken() },\r\n                body: JSON.stringify(jsonBody1)\r\n            }\r\n\r\n            var requestOptions2 = {\r\n                method: 'POST',\r\n                headers: { \"Content-Type\": \"application/json\", \"Authorization\": \"Bearer \" + this.props.getAuthToken() },\r\n                body: JSON.stringify(jsonBody2)\r\n            }\r\n\r\n            Promise.all([\r\n                fetch(\"https://stockprice--service.herokuapp.com/excel/getCompaniesByDate\", requestOptions1),\r\n                fetch(\"https://stockprice--service.herokuapp.com/excel/getCompaniesByDate\", requestOptions2)\r\n            ])\r\n                .then(([res1, res2]) => {\r\n                    return Promise.all([res1.json(), res2.json()])\r\n                })\r\n                .then(([res1, res2]) => {\r\n                    if (res1 != null && res2 != null) {\r\n                        console.log(res1);\r\n                        console.log(res2);\r\n                        let category = [];\r\n                        let companyValue1 = [];\r\n                        let companyValue2 = [];\r\n                        var length = res1.length;\r\n                        for (var i = 0; i < length; i++) {\r\n                            let date = res1[i].date;\r\n                            let price1 = res1[i].currentPrice;\r\n                            let price2 = res2[i].currentPrice;\r\n\r\n                            let tempObj = {\r\n                                \"label\": date\r\n                            }\r\n                            let comp1Obj = {\r\n                                \"value\": price1\r\n                            }\r\n                            let comp2Obj = {\r\n                                \"value\": price2\r\n                            }\r\n                            category.push(tempObj);\r\n                            companyValue1.push(comp1Obj);\r\n                            companyValue2.push(comp2Obj);\r\n                        }\r\n\r\n                        this.setState({\r\n                            category: category,\r\n                            companyValue1: companyValue1,\r\n                            companyValue2: companyValue2\r\n                        })\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const dataSource = {\r\n            chart: {\r\n                caption: \"Stock Market Price\",\r\n                exportEnabled: \"1\",\r\n                exportMode: \"client\",\r\n                yaxisname: \"Price\",\r\n                numberprefix: \"Rs.\",\r\n                rotatelabels: \"1\",\r\n                setadaptiveymin: \"1\",\r\n                theme: \"fusion\"\r\n            },\r\n            data: this.state.dataFormatChart\r\n        };\r\n\r\n        const dataSource2Companies = {\r\n            chart: {\r\n                caption: \"Comparison of 2 Companies over time\",\r\n                exportEnabled: \"1\",\r\n                exportMode: \"client\",\r\n                yaxisname: \"Price\",\r\n                numberprefix: \"Rs.\",\r\n                showhovereffect: \"1\",\r\n                theme: \"fusion\"\r\n            },\r\n            categories: [\r\n                {\r\n                    category: this.state.category\r\n                }\r\n            ],\r\n            dataset: [\r\n                {\r\n                    seriesname: this.state.companySelected,\r\n                    data: this.state.companyValue1\r\n                },\r\n                {\r\n                    seriesname: this.state.secondCompanySelected,\r\n                    data: this.state.companyValue2\r\n                }\r\n            ]\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <NavWithDropDownUser />\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <Row>\r\n                    <div id=\"compare-main-div\">\r\n                        <Card id=\"select-form-cc\">\r\n                            <Card.Header id=\"header-cc\">Compare Companies</Card.Header>\r\n                            <Card.Body>\r\n                                <Col>\r\n                                    <Form>\r\n                                        <br></br>\r\n                                        <Form.Group>\r\n                                            <Form.Label id=\"select-c-s\">Select Stock Exchange</Form.Label>\r\n                                            <select onChange={e => this.setState({ exchangeSelected: e.target.value })} name=\"exchange\" id=\"exchange\">\r\n                                                {this.state.exchangeData.map(exchange => (\r\n                                                    <option key={exchange} value={exchange}>\r\n                                                        {exchange}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </Form.Group>\r\n                                        <br></br>\r\n                                        <Form.Group>\r\n                                            <Form.Label>Enter Company</Form.Label>\r\n                                            <input onChange={e => this.setState({ companySelected: e.target.value })} type=\"text\" id=\"select-c\" placeholder=\"Enter Company name\" />\r\n                                        </Form.Group>\r\n                                        <br></br>\r\n                                        <Row md=\"2\">\r\n                                            <Form.Group>\r\n                                                <Form.Label id=\"from-period\">From Period</Form.Label>\r\n                                                <input onChange={e => this.setState({ fromPeriod: e.target.value })} id=\"select-d\" type=\"date\" />\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group>\r\n                                                <Form.Label>To Period</Form.Label>\r\n                                                <input onChange={e => this.setState({ toPeriod: e.target.value })} id=\"select-d\" type=\"date\" />\r\n                                            </Form.Group>\r\n                                        </Row>\r\n\r\n                                        <br></br>\r\n                                        <Row md=\"2\">\r\n                                            <Col>\r\n                                                <Form.Group>\r\n                                                    <Form.Label id=\"select-p\">Select Periodicity</Form.Label>\r\n                                                    <select onChange={e => this.setState({ periodicity: e.target.value })} name=\"period\" id=\"period\">\r\n                                                        <option key=\"weekly\" value=\"weekly\">Weekly</option>\r\n                                                        <option key=\"monthly\" value=\"monthly\">Monthly</option>\r\n                                                        <option key=\"quarterly\" value=\"quarterly\">Quarterly</option>\r\n                                                        <option key=\"yearly\" value=\"yearly\">Yearly</option>\r\n                                                    </select>\r\n                                                </Form.Group>\r\n                                            </Col>\r\n                                            <Col>\r\n                                                <Form.Label> Click to add company</Form.Label>\r\n                                                {this.state.addButtonClicked === false ? <Button onClick={this.addNewForm} id=\"add-button\" variant=\"primary\"> + </Button>\r\n                                                    :\r\n                                                    <input type=\"text\" onChange={e => this.setState({ secondCompanySelected: e.target.value })} placeholder=\"Enter new company name\" />}\r\n\r\n                                            </Col>\r\n                                        </Row>\r\n\r\n\r\n\r\n                                        <Button onClick={this.generateMap} variant=\"primary\" id=\"generate\" type=\"submit\">\r\n                                            Generate Chart\r\n                                        </Button>\r\n\r\n                                    </Form>\r\n                                </Col>\r\n                            </Card.Body>\r\n\r\n                        </Card>\r\n                    </div>\r\n\r\n                    <div id=\"chart\">\r\n                        <Card id=\"chart-display\">\r\n                            <Card.Header id=\"chart-header\"> Chart</Card.Header>\r\n                            <Card.Body id=\"chart-body\">\r\n                                {this.state.secondCompanySelected === '' ?\r\n                                    <ReactFusioncharts\r\n                                        id=\"fusionCharts\"\r\n                                        type=\"line\"\r\n                                        width=\"100%\"\r\n                                        height=\"100%\"\r\n                                        dataFormat=\"JSON\"\r\n\r\n                                        dataSource={dataSource}\r\n                                    />\r\n                                    :\r\n                                    <ReactFusioncharts\r\n                                        type=\"msline\"\r\n                                        width=\"100%\"\r\n                                        height=\"100%\"\r\n                                        dataFormat=\"JSON\"\r\n                                        dataSource={dataSource2Companies}\r\n                                    />\r\n                                }\r\n\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </div>\r\n                </Row>\r\n\r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default CompareCompany;"]},"metadata":{},"sourceType":"module"}