{"ast":null,"code":"var _jsxFileName = \"D:\\\\stock-chart\\\\src\\\\Components\\\\CompareSector\\\\CompareSector.js\";\nimport React, { Component } from 'react';\nimport './CompareSector.css';\nimport Card from 'react-bootstrap/Card';\nimport { Button, Form } from 'react-bootstrap';\nimport NavWithDropDownUser from '../UserNavBar';\nimport { Row, Col } from 'react-bootstrap';\nimport ReactFC from \"react-fusioncharts\";\nimport FusionCharts from \"fusioncharts\";\nimport ReactFusioncharts from \"react-fusioncharts\";\nimport charts from \"fusioncharts/fusioncharts.charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ncharts(FusionCharts);\n\nclass CompareSector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sectorsList: [],\n      sectorSelected: '',\n      fromPeriod: '',\n      toPeriod: '',\n      periodicity: '',\n      addButtonClicked: false,\n      secondSectorSelected: '',\n      dataFormatChart: []\n    };\n    this.generateMap = this.generateMap.bind(this);\n    this.addNewForm = this.addNewForm.bind(this);\n  }\n\n  addNewForm() {\n    this.setState({\n      addButtonClicked: true\n    });\n  }\n\n  componentDidMount() {\n    var requestOptions = {\n      method: 'GET',\n      headers: {\n        \"Authorization\": \"Bearer \" + this.props.getAuthToken()\n      }\n    };\n    fetch('http://localhost:8083/sector/getAllSectors', requestOptions).then(response => {\n      if (response.status === 200) {\n        return response.json();\n      }\n\n      return null;\n    }).then(data => {\n      if (data != null) {\n        this.setState({\n          sectorsList: data\n        });\n      }\n    });\n  }\n\n  generateMap(e) {\n    e.preventDefault();\n    var jsonBody = {\n      \"sector\": this.state.sectorSelected,\n      \"fromPeriod\": this.state.fromPeriod,\n      \"toPeriod\": this.state.toPeriod,\n      \"periodicity\": this.state.periodicity\n    };\n    var requestOptions = {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(jsonBody)\n    };\n    fetch('http://localhost:8085/excel/getSectorByDate', requestOptions).then(response => {\n      if (response.status === 200) {\n        return response.json();\n      } else {\n        console.log(response.status);\n      }\n\n      return null;\n    }).then(data => {\n      if (data != null) {\n        console.log(data);\n        let dataChart = [];\n        var length = data.length;\n\n        for (var i = 0; i < length; i++) {\n          let price = data[i].currentPrice;\n          let date = data[i].date;\n          let tempObj = {\n            \"label\": date,\n            \"value\": price\n          };\n          dataChart.push(tempObj);\n        }\n\n        console.log(dataChart);\n        this.setState({\n          dataFormatChart: dataChart,\n          addButtonClicked: false\n        });\n      }\n    });\n  }\n\n  render() {\n    const dataSource = {\n      chart: {\n        caption: \"Sector Average Price\",\n        yaxisname: \"Price\",\n        numberprefix: \"Rs.\",\n        rotatelabels: \"1\",\n        setadaptiveymin: \"1\",\n        theme: \"fusion\"\n      },\n      data: this.state.dataFormatChart\n    };\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NavWithDropDownUser, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"compare-main-div-sector\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            id: \"select-form-cc-sector\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n              id: \"header-cc-sector\",\n              children: \"Compare Sectors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(Form, {\n                  children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      id: \"select-c-sector\",\n                      children: \"Select Sector\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 134,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                      onChange: e => this.setState({\n                        sectorSelected: e.target.value\n                      }),\n                      name: \"sector\",\n                      id: \"sector\",\n                      children: this.state.sectorsList.map(sector => /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: sector,\n                        children: sector\n                      }, sector, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 137,\n                        columnNumber: 29\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 135,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    md: \"2\",\n                    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                        id: \"from-period-sector\",\n                        children: \"From Period\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 148,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        onChange: e => this.setState({\n                          fromPeriod: e.target.value\n                        }),\n                        id: \"select-d-sector\",\n                        type: \"date\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 149,\n                        columnNumber: 33\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 147,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                        children: \"To Period\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 153,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        onChange: e => this.setState({\n                          toPeriod: e.target.value\n                        }),\n                        id: \"select-d-sector\",\n                        type: \"date\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 154,\n                        columnNumber: 33\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 152,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    md: \"2\",\n                    children: [/*#__PURE__*/_jsxDEV(Col, {\n                      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                          id: \"select-p-sector\",\n                          children: \"Select Periodicity\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 163,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                          onChange: e => this.setState({\n                            periodicity: e.target.value\n                          }),\n                          name: \"period\",\n                          id: \"period\",\n                          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"weekly\",\n                            children: \"Weekly\"\n                          }, \"weekly\", false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 165,\n                            columnNumber: 33\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"monthly\",\n                            children: \"Monthly\"\n                          }, \"monthly\", false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 166,\n                            columnNumber: 33\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"quarterly\",\n                            children: \"Quarterly\"\n                          }, \"quarterly\", false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 167,\n                            columnNumber: 33\n                          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                            value: \"yearly\",\n                            children: \"Yearly\"\n                          }, \"yearly\", false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 168,\n                            columnNumber: 33\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 164,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 162,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 161,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                        children: \" Click to add sector\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 173,\n                        columnNumber: 29\n                      }, this), this.state.addButtonClicked === false ? /*#__PURE__*/_jsxDEV(Button, {\n                        onClick: this.addNewForm,\n                        id: \"add-button-sector\",\n                        variant: \"primary\",\n                        children: \" + \"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 174,\n                        columnNumber: 70\n                      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"text\",\n                        onChange: e => this.setState({\n                          secondSectorSelected: e.target.value\n                        }),\n                        placeholder: \"Enter new sector name\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 176,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 172,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: this.generateMap,\n                    variant: \"primary\",\n                    id: \"generate-sector\",\n                    type: \"submit\",\n                    children: \"Generate Chart\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 183,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chart-sector\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            id: \"chart-display\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n              id: \"chart-header-sector\",\n              children: \" Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              id: \"chart-body-sector\",\n              children: this.state.secondSectorSelected === '' ? /*#__PURE__*/_jsxDEV(ReactFusioncharts, {\n                id: \"fusionCharts\",\n                type: \"line\",\n                width: \"100%\",\n                height: \"100%\",\n                dataFormat: \"JSON\",\n                dataSource: dataSource\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 29\n              }, this) : \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CompareSector;","map":{"version":3,"sources":["D:/stock-chart/src/Components/CompareSector/CompareSector.js"],"names":["React","Component","Card","Button","Form","NavWithDropDownUser","Row","Col","ReactFC","FusionCharts","ReactFusioncharts","charts","CompareSector","constructor","props","state","sectorsList","sectorSelected","fromPeriod","toPeriod","periodicity","addButtonClicked","secondSectorSelected","dataFormatChart","generateMap","bind","addNewForm","setState","componentDidMount","requestOptions","method","headers","getAuthToken","fetch","then","response","status","json","data","e","preventDefault","jsonBody","body","JSON","stringify","console","log","dataChart","length","i","price","currentPrice","date","tempObj","push","render","dataSource","chart","caption","yaxisname","numberprefix","rotatelabels","setadaptiveymin","theme","target","value","map","sector"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './CompareSector.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport {Button,Form} from 'react-bootstrap';\r\nimport NavWithDropDownUser from '../UserNavBar';\r\nimport {Row,Col} from 'react-bootstrap';\r\nimport ReactFC from \"react-fusioncharts\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport ReactFusioncharts from \"react-fusioncharts\";\r\nimport charts from \"fusioncharts/fusioncharts.charts\";\r\n\r\ncharts(FusionCharts);\r\n\r\nclass CompareSector extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            sectorsList : [],\r\n            sectorSelected : '',\r\n            fromPeriod : '',\r\n            toPeriod : '',\r\n            periodicity : '',\r\n            addButtonClicked : false,\r\n            secondSectorSelected : '',\r\n            dataFormatChart : []\r\n        }\r\n        this.generateMap = this.generateMap.bind(this);\r\n        this.addNewForm = this.addNewForm.bind(this);\r\n    }\r\n    addNewForm(){\r\n        this.setState({addButtonClicked : true});\r\n    }\r\n    componentDidMount(){\r\n        var requestOptions = {\r\n            method : 'GET',\r\n            headers : {\"Authorization\" : \"Bearer \" + this.props.getAuthToken() }\r\n        }\r\n        fetch('http://localhost:8083/sector/getAllSectors',requestOptions)\r\n        .then(response => {\r\n            if(response.status === 200){\r\n                return response.json();\r\n            }\r\n            return null;\r\n        })\r\n        .then(data => {\r\n            if(data != null){\r\n                this.setState({\r\n                    sectorsList : data\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    generateMap(e){\r\n        e.preventDefault();\r\n\r\n        var jsonBody = {\r\n            \"sector\" : this.state.sectorSelected,\r\n            \"fromPeriod\" : this.state.fromPeriod,\r\n            \"toPeriod\" : this.state.toPeriod,\r\n            \"periodicity\" : this.state.periodicity\r\n        }\r\n\r\n        var requestOptions = {\r\n            method : 'POST',\r\n            headers : {\"Content-Type\":\"application/json\" },\r\n            body : JSON.stringify(jsonBody)            \r\n        }\r\n\r\n        fetch('http://localhost:8085/excel/getSectorByDate',requestOptions)\r\n        .then(response => {\r\n            if(response.status === 200){\r\n                return response.json();\r\n            }\r\n            else{\r\n                console.log(response.status);\r\n            }\r\n            return null;\r\n        })\r\n        .then(data => {\r\n            if(data != null){\r\n                console.log(data);\r\n                let dataChart = [];\r\n                var length = data.length;\r\n                for(var i = 0;i<length;i++){\r\n                    let price = data[i].currentPrice;\r\n                    let date = data[i].date;\r\n                    let tempObj = {\r\n                        \"label\" : date,\r\n                        \"value\" : price\r\n                    }\r\n                    dataChart.push(tempObj);\r\n                }\r\n                console.log(dataChart);\r\n                this.setState({\r\n                    dataFormatChart : dataChart,\r\n                    addButtonClicked : false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        const dataSource = {\r\n            chart : {\r\n                caption : \"Sector Average Price\",\r\n                yaxisname : \"Price\",\r\n                numberprefix: \"Rs.\",\r\n                rotatelabels: \"1\",\r\n                setadaptiveymin:\"1\",\r\n                theme:\"fusion\"\r\n            },\r\n            data : this.state.dataFormatChart\r\n        };\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <NavWithDropDownUser />\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n                <Row>\r\n\r\n                <div id=\"compare-main-div-sector\">\r\n                <Card id=\"select-form-cc-sector\">\r\n                <Card.Header id=\"header-cc-sector\">Compare Sectors</Card.Header>\r\n                <Card.Body>\r\n                    <Col>\r\n                    <Form>\r\n                        <br></br>\r\n                        <Form.Group>\r\n                            <Form.Label id=\"select-c-sector\">Select Sector</Form.Label>\r\n                            <select  onChange={e => this.setState({sectorSelected : e.target.value})} name=\"sector\" id=\"sector\">\r\n                            {this.state.sectorsList.map(sector => (\r\n                            <option key={sector} value={sector}>\r\n                                {sector}\r\n                            </option>\r\n                            ))}\r\n                            </select>\r\n                        </Form.Group>\r\n                        \r\n                        <br></br>\r\n                  \r\n                        <Row md=\"2\">\r\n                            <Form.Group>\r\n                                <Form.Label id=\"from-period-sector\">From Period</Form.Label>\r\n                                <input onChange={e => this.setState({fromPeriod : e.target.value})} id=\"select-d-sector\" type=\"date\"/>\r\n                            </Form.Group>\r\n                            \r\n                            <Form.Group>\r\n                                <Form.Label>To Period</Form.Label>\r\n                                <input onChange={e => this.setState({toPeriod : e.target.value})} id=\"select-d-sector\" type=\"date\"/>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        \r\n                        <br></br>\r\n\r\n                        <Row md=\"2\">\r\n                        <Col>\r\n                        <Form.Group>\r\n                            <Form.Label id=\"select-p-sector\">Select Periodicity</Form.Label>\r\n                            <select onChange={e => this.setState({periodicity : e.target.value})} name=\"period\" id=\"period\">\r\n                                <option key=\"weekly\" value=\"weekly\">Weekly</option>\r\n                                <option key=\"monthly\" value=\"monthly\">Monthly</option>\r\n                                <option key=\"quarterly\" value=\"quarterly\">Quarterly</option>\r\n                                <option key=\"yearly\" value=\"yearly\">Yearly</option>\r\n                            </select> \r\n                        </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Label> Click to add sector</Form.Label>\r\n                            {this.state.addButtonClicked === false ? <Button onClick={this.addNewForm} id=\"add-button-sector\" variant=\"primary\"> + </Button> \r\n                            : \r\n                            <input type=\"text\" onChange={e => this.setState({secondSectorSelected : e.target.value})} placeholder=\"Enter new sector name\" />}\r\n                            \r\n                        </Col> \r\n                        </Row>\r\n                        \r\n                        \r\n                        \r\n                        <Button onClick={this.generateMap} variant=\"primary\" id=\"generate-sector\" type=\"submit\">\r\n                            Generate Chart\r\n                        </Button>\r\n                        \r\n                    </Form>\r\n                    </Col>   \r\n                </Card.Body>\r\n            \r\n                </Card>\r\n                </div>\r\n\r\n                <div id=\"chart-sector\">\r\n                    <Card id=\"chart-display\">\r\n                        <Card.Header id=\"chart-header-sector\"> Chart</Card.Header>\r\n                        <Card.Body id=\"chart-body-sector\">\r\n                            {this.state.secondSectorSelected === '' ? \r\n                            <ReactFusioncharts\r\n                            id=\"fusionCharts\"\r\n                            type=\"line\"\r\n                            width=\"100%\"\r\n                            height=\"100%\"\r\n                            dataFormat=\"JSON\"\r\n                            dataSource={dataSource}\r\n                            />\r\n                            :\r\n                            \" \"\r\n                            }\r\n                                 \r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CompareSector;"]},"metadata":{},"sourceType":"module"}