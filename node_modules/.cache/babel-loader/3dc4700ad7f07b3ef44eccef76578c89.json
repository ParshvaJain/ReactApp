{"ast":null,"code":"var _jsxFileName = \"D:\\\\stock-chart\\\\src\\\\Components\\\\ImportData\\\\ImportData.js\";\nimport React, { Component } from 'react';\nimport './ImportData.css';\nimport XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ImportData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n      /* Array of Arrays e.g. [[\"a\",\"b\"],[1,2]] */\n      ,\n      cols: []\n      /* Array of column objects e.g. { name: \"C\", K: 2 } */\n\n    };\n    this.handleFile = this.handleFile.bind(this);\n    this.exportFile = this.exportFile.bind(this);\n  }\n\n  handleFile(file\n  /*:File*/\n  ) {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\"\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      console.log(rABS, wb);\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      console.log(JSON.stringify(data) + \"this data needs to be passed to rest endpoint to save prices\");\n      /* Update state */\n\n      this.setState({\n        data: data,\n        cols: make_cols(ws[\"!ref\"])\n      });\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  }\n\n  exportFile() {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(this.state.data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropFile, {\n      handleFile: this.handleFile,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xs-12\",\n          children: /*#__PURE__*/_jsxDEV(DataInput, {\n            handleFile: this.handleFile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xs-12\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: !this.state.data.length,\n            className: \"btn btn-success\",\n            onClick: this.exportFile,\n            children: \"Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xs-12\",\n          children: /*#__PURE__*/_jsxDEV(OutTable, {\n            data: this.state.data,\n            cols: this.state.cols\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default ImportData;","map":{"version":3,"sources":["D:/stock-chart/src/Components/ImportData/ImportData.js"],"names":["React","Component","XLSX","ImportData","constructor","props","state","data","cols","handleFile","bind","exportFile","file","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","console","log","utils","sheet_to_json","header","JSON","stringify","setState","make_cols","readAsArrayBuffer","aoa_to_sheet","book_new","book_append_sheet","writeFile","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './ImportData.css';\r\nimport XLSX from \"xlsx\";\r\n\r\n\r\nclass ImportData extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          data: [] /* Array of Arrays e.g. [[\"a\",\"b\"],[1,2]] */,\r\n          cols: [] /* Array of column objects e.g. { name: \"C\", K: 2 } */\r\n        };\r\n        this.handleFile = this.handleFile.bind(this);\r\n        this.exportFile = this.exportFile.bind(this);\r\n    }\r\n\r\n    handleFile(file /*:File*/) {\r\n        /* Boilerplate to set up FileReader */\r\n        const reader = new FileReader();\r\n        const rABS = !!reader.readAsBinaryString;\r\n        reader.onload = e => {\r\n          /* Parse data */\r\n          const bstr = e.target.result;\r\n          const wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\r\n          /* Get first worksheet */\r\n          const wsname = wb.SheetNames[0];\r\n          const ws = wb.Sheets[wsname];\r\n          console.log(rABS, wb);\r\n          /* Convert array of arrays */\r\n          const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\r\n          console.log(JSON.stringify(data)+\"this data needs to be passed to rest endpoint to save prices\");\r\n          /* Update state */\r\n          this.setState({ data: data, cols: make_cols(ws[\"!ref\"]) });\r\n        };\r\n        if (rABS) reader.readAsBinaryString(file);\r\n        else reader.readAsArrayBuffer(file);\r\n      }\r\n\r\n      exportFile() {\r\n        /* convert state to workbook */\r\n        const ws = XLSX.utils.aoa_to_sheet(this.state.data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\r\n        /* generate XLSX file and send to client */\r\n        XLSX.writeFile(wb, \"sheetjs.xlsx\");\r\n      }\r\n      render() {\r\n        return (\r\n          <DragDropFile handleFile={this.handleFile}>\r\n            <div className=\"row\">\r\n              <div className=\"col-xs-12\">\r\n                <DataInput handleFile={this.handleFile} />\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-xs-12\">\r\n                <button\r\n                  disabled={!this.state.data.length}\r\n                  className=\"btn btn-success\"\r\n                  onClick={this.exportFile}\r\n                >\r\n                  Export\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-xs-12\">\r\n                <OutTable data={this.state.data} cols={this.state.cols} />\r\n              </div>\r\n            </div>\r\n          </DragDropFile>\r\n        );\r\n      }\r\n    }    \r\n\r\n\r\n\r\nexport default ImportData;"]},"metadata":{},"sourceType":"module"}